---
layout: homework
title: CSCI-UA.0480 - Homework #1
---

<div class="panel panel-default">
	<div class="panel-heading">Homework #1</div>
	<div class="panel-body" markdown="block">

# Blackjack, __Due Feb 5th, by 11PM__

## Overview

### Description

__There are multiple parts to this homework:__

__Part 1__ - exercises from the book

A selection of exercises from Chapter 4 in our book, {{ site.book_js }}.

* A variation of "The sum of a range" exercise - create a function called range that emulates Python's range function... which you'll use with your own implementation of sum in order to calculate the sum of a range of numbers
* "A list" - create functions that construct and manipulate a linked list (this should be familiar to you)

__Part 2__ and __Part 3__ - blackjack

Create a commandline Blackjack game with 2 players - the user and the computer. 

* each player is dealt 2 cards from a 52 card deck, with each card representing some numeric value
* each player can choose to be dealt more cards ("hit") or stop being dealt cards ("stand") 
* the sum of the numeric values of the cards in a player's hand determines if they've one
* once both players have either chosen to stand or have a hand with a total that's more than 21 ("bust"), the hands are compared
* the player with the hand that's closest to 21 without going over wins
* ties are possible (either same total, or both player "bust")

See the [sample output](#hw01-sample) at the end of these instructions.

### Submission Process

The final version of your assignment should be in GitHub.

* __push__ your changes to the homework repository on GitHub
* there is a 24 hour grace period where you can still commit and push changes
* all code will be cloned 24 hours after the due date
* after that, no further commits are accepted


## Preparation

### (0 points, but obvs required for homework!) Tools

Ensure that you have the following tools installed:

* node
* npm (usually comes with node)
* git

### (4 points) Use Git

* use this [form to send me your github username](https://docs.google.com/a/nyu.edu/forms/d/1mgHQ2NupHDAlirAcbYjeSShFeAWNyPH1sqCqa7zTe2M/viewform)
* wait for a notification that states that you've been added to the class's github _organization_
* I'll create a repository for you (I'll create all of the repositories on Monday)
* ...then go to the [class github page](https://github.com/nyu-csci-ua-0480-010-spring-2016)
* find the repository that starts with either your NYU NetID or your github name, and ends with homework01 (for example, jjv222-homework01) 
* use the url in the right-hand bar, under HTTPS clone URL to __clone__ the homework ... using the commandline client, that would be (with GITHUB_REPOSITORY_URL being the url you copied from the right hand bar):
<pre><code data-trim contenteditable> git clone GITHUB_REPOSITORY_URL
</code></pre>
* create a file called <code>.gitignore</code> in the same directory
* add the following line to the file so that git ignores any locally installed node modules: <code> node_modules </code>
* in the same project directory, run <code>git add README.md</code> to let git know that we're ready to "save"
* save your work locally by running <code>git commit -m "first commit"</code>... everything within the quotes after <code>-m</code> is any commit message you'd like
* use <code>git remote add origin YOUR_REPOSITORY_URL_FROM_ABOVE</code> to let git know that github is your remote repository
* finally, send your work to github by running <code>git push -u origin master</code>

### (1 points) Download a Module Using npm, Start Your Actual Code

For parts 2 and 3, you'll need a module to help you ask the user for input. 

Installing a module:

* in your repository directory, install the node module, <code>readline-sync</code>, by running this command in your project's directory:
<pre><code> npm install readline-sync
</code></pre>
* note that the <code>readline-sync</code> module allows you to prompt for user input __synchronously__
	* this is very different from how node.js apps usually operate
	* however, for our purposes, using sync prompt is fine (for now), and it mimics the browser's prompt functionality well
* installing <code>readline-sync</code> will create a folder called <code>node_modules</code> in the directory that you ran npm in (don't worry, it'll be ignored by git!)
* create a file called <code>app.js</code> (if it isn't already there!)
* in your <code>app.js</code> file, add the line:
<pre><code>var readlineSync = require('readline-sync');</code></pre>
* this imports the function <code>question</code> from the <code>readline-sync</code> module into your program
* write the remainder of your code for parts 2 and 3 in this file
* as you write your code, make sure that you make at least three commits total (one for prep, part 1 and part 2). more commits are better
<pre><code data-trim contenteditable>git add --all
git commit -m 'your commit message'
</code></pre>
* push your code frequently
<pre><code data-trim contenteditable>git push
</code></pre>

### Running Your Programs

To run your programs, use the commandline (Terminal.app, DOS, etc.):

<code>node myfile.js</code>

* obvs, do this for each file you create
* (many times)

## Part 1 - exercises

### (10 points) range.js

In the file called __range.js__, implement a function called <code>range</code>. It should behave like Python's range function in that the number of arguments it receives determines how it works. <code>range</code> will produce an <code>Array</code> of <code>Numbers</code> based on the arguments passed into it.

* with one argument, it'll give back a range of numbers starting with 0 and going up to, but not including the <code>Number</code> specified by the argument, by 1's
	* <code>range(3); // &rarr; [0, 1, 2]</code>
* with two arguments, the range of numbers produced will start with the first argument (inclusive), and go up to, but not including the second argument (exclusive)... again by 1's
	* <code>range(2, 5); // &rarr; [2, 3, 4]</code>
* with three arguments, the first two specify start and stop as the two argument version, but the third argument will specify the step (or increment), instead of just counting by 1's (negative step is allowed, in which case range counts down!)
	* <code>range(4, 9, 2); // &rarr; [4, 6, 8]</code>
	* <code>range(8, 3, -2); // &rarr; [8, 6, 4]</code>
* if a range is not possible (for example, start is less than stop, but step is negative), give back an empty <code>Array</code>
	* <code>range(1, 3, -1); // &rarr; []</code>

Once you have a working implementation, add the code below to the end of your file to test if everything works correctly:

<pre><code data-trim contenteditable>console.log(range(5));
console.log(range(2, 5));
console.log(range(2, 9, 2));
console.log(range(5, 0, -1));
console.log(range(6, -1, -2));
console.log(range(6, -1, 1));
</code></pre>

The output should look like this:

<pre><code data-trim contenteditable>[ 0, 1, 2, 3, 4 ]
[ 2, 3, 4 ]
[ 2, 4, 6, 8 ]
[ 5, 4, 3, 2, 1 ]
[ 6, 4, 2, 0 ]
[]
</code></pre>

Hint: dealing with the optional arguments and positional arguments with different meanings can be tricky. Some things that may help are:

* checking if parameter exists and defaulting to a value: <code>paramName || defaultValue</code>
* using the built-in <code>arguments</code> object within your function
* note that reassigning new values to parameters actually modifies the <code>arguments</code> object:

<pre><code data-trim contenteditable>// notice the value of arguments before reassignment
// of parameters
function f(a, b) {
  console.log(arguments);
  var a = 5;
  b = 10;
  console.log(arguments);
}
// it does not matter if you use var in this case...
// both versions result in arguments being modified
</code></pre>

<pre><code data-trim contenteditable>// output from above
{ '0': 2, '1': 3 }
{ '0': 5, '1': 10 }
</code></pre>

__Use git to add, commit and push your changes when you're finished with range!__

### (10 points) linkedList.js

In the file called __linkedList.js__, implement the functions specified in Exercise 3, "A list", from {{ site.book_js }}

Writing a recursive solution for the function, <code>nth</code>, is __optional__ (it's fun, so you __should__ do it, though!).

Test your code using the example output from the book. Add the following to the end of your file:

<pre><code data-trim contenteditable>console.log(arrayToList([10, 20]));
console.log(listToArray(arrayToList([10, 20, 30])));
console.log(prepend(10, prepend(20, null)));
console.log(nth(arrayToList([10, 20, 30]), 1));
</code></pre>

The output should look like this:

<pre><code data-trim contenteditable>{value: 10, rest: {value: 20, rest: null}}
[10, 20, 30]
{value: 10, rest: {value: 20, rest: null}}
20
</code></pre>

__Use git to add, commit and push your changes when you're finished with your linked list implementation!__

## Part 2 - blackjack functions

In order to write the blackjack program, we can break down the game into several functions... and place these functions into another file that will be used by your actual blackjack game. In the file called __cardUtils.js__, implement the following functions, __exactly as specified__ (take care of making sure the function names, parameters, parameter names and return values are all accurate).

To create a __module__ (a file with JavaScript in it that can be used by another JavaScript program), read [the introduction to modules in the node.js documentation](https://nodejs.org/api/modules.html#modules_modules). Your module should _export_ the function you create so that you can use <code>require</code> in your blackjack game.

In <code>cardUtils.js</code>, create your functions and add them to the _built-in_ exports object. For example:

<pre><code data-trim contenteditable>function determineWinner(num1, num2) {
    // your code here...
}

exports.determineWinner = determineWinner

// OR

exports.determineWinner = function(num1, num2) {
    // your code here...
}
</code></pre>

In <code>game.js</code>, you can use the functions that you've created in <code>cardUtils.js</code>. bring in your functions and use them by first __requiring your module__ and using the variable that you assign the <code>require</code> to as a way of accessing the functions defined in the module:

<pre><code data-trim contenteditable>var cardUtils = require('./cardUtils');
var winner = cardUtils.determineWinner(20, 15);
</code></pre>

### (5 points) generateCards()

* __parameters__: none
* __return__: an array of objects, with each object representing a card
* __description__: generate and return an array of card objects 
	* each card object will have the following properties
		* suit (4 possible values, the strings: ♠, ♥, ♦, ♣
		* face (13 possible values, the strings '2' .. '10', 'J', 'Q', 'K', 'A'
	* each combination of suit and face should represented
	* there should be a total of 52 objects
	* example list with two card objects <code> [{ suit: '♣', face: '2' }, { suit: '♦', face: '6' } ]</code>
	* example usage: <code>var cards = generateCards();</code>

### (10 points) shuffle(Array)

* __parameters__: an array of card objects (see return value of) <code>generateCards</code>
* __return__: a randomly ordered array objects, with each object representing a card
* __description__: shuffle the array of cards passed in as an argument and return shuffled cards
	* use a shuffling algorithm to rearrange the order of the array of cards passed in
	* some approaches include:
		* algorithm 1:
			* maintain two decks of cards, the originally passed in deck, and a new empty deck where shuffled cards are placed
			* continually pick a random index (use <code>Math.random()</code>) from the original array of cards
			* remove the item at that index using the array's <code>splice</code> method, and use the <code>push</code> method to place it in the shuffled deck (the newly created array)
			* do this until there are no more cards in the original deck
		* algorithm 2:
			* do the same as above, but instead of maintaining a new deck... use the end of the original deck as to store the shuffled cards
			* pick a random card... and swap it with the last card
			* pick another random card, but limit the choice to cards up to, but no including the last card, and swap it with the 2nd to last card
			* do this until there are no longer cards to shuffle
	* return the shuffled deck
	* example usage: <code>var cards = shuffle(cards);</code>
	* (note that you may end up _mutating_ the array that's passed in as a parameter; that's ok for now)
				
### (10 points) calculateHand(Array)

* __parameters__: an array of card objects (see return value of) <code>generateCards</code>
* __return__: a Number that represents the total of all of the cards in the hand
* __description__: calculate and return the total numeric value of a hand 
	* each card has a value:
		* number cards ('2' ... '10') can translated directly to numeric values: '2' &rarr; 2
		* face cards ('J', 'Q', 'K') are worth 10 each
		* aces ('A') are worth either 1 or 11 depending on which value brings the hand closer to 21 without going over
		* some examples are:
			* 'K', '3', '5' = 18
			* 'A', 'A', 'A', '8' = 21
			* '6', 'A',  = 17
		* one algorithm for dealing with aces is:
			* count each ace as 11
			* after calculating the total, if the total is greater than 21...
			* continually subtract 10 for each 'A' in the hand
	* example usage: <code>var total = calculateHand(playerHand);</code>

### (5 points) determineWinner(Number, Number)

* __parameters__: the first number should represent the total for the player's hand, and the second total should represent the total for the computer's hand
* __return__: a string that represents who one: "Player", "Computer", or "Tie"
* __description__: determine the winner based on the totals passed in, and return the string representation of the winner
	* the player with the total closest to 21 without going over wins
	* if both totals are the same, or if both players "bust", it's a tie
	* example usage: <code>var winner = determineWinner(playerTotal, computerTotal);</code>

## Part 2 - interactive blackjack game

### (15 points) Use the above functions to create an interactive commandline game. 

* continually "deal" 2 cards to the computer and the player (remove the from the shuffled deck, add them to the players' hands)
* do this as long as the number of cards in the shuffled deck is greater than or equal to half of the original deck (26)
	* when the hands are dealt...
	* continually ask the player if they want to (h)it or (s)tand 
	* use <code>question</code> to collect the player's command - <code>h</code> or <code>s</code>
	* <code>var letter = readlineSync.question('type h to (h)it or s to (s)tay: ');</code>
	* based on the command, either deal another card, or stand
	* if the player chooses stand, stop
	* if the dealt card results in the total going over 21, stop
	* once the player has stopped... the computer will play its hand
		* the computer will continually "hit" as long as the total of its cards are less than 17
		* once the computer has gone over 17, stop
	* compare the computer and player hand totals
	* determine the winner
	* see the example output below as a sample implementation


<a name="hw01-sample"></a>

## Example Output


<pre><code>Your hand is: 7♥ K♥ ... for a total of 17
(h)it or (s)tay
> s
Your hand: 7♥ K♥ (17), Computer hand: K♦ Q♦ (20)
Computer Wins

There are 48 cards left in the deck
-----------------------

Your hand is: 7♣ A♠ ... for a total of 18
(h)it or (s)tay
> h
Your hand: 7♣ A♠ A♥ (19)
(h)it or (s)tay
> s
Your hand: 7♣ A♠ A♥ (19), Computer hand: 10♦ 9♥ (19)
Tie!

There are 43 cards left in the deck
-----------------------

.
.
. (a few more hands are dealt... 'til the last one below)
.
.

Your hand is: A♦ 5♦ ... for a total of 16
(h)it or (s)tay
> h
Your hand: A♦ 5♦ 6♦ (12)
(h)it or (s)tay
> h
Your hand: A♦ 5♦ 6♦ 9♠ (21)
(h)it or (s)tay
> s
Your hand: A♦ 5♦ 6♦ 9♠ (21), Computer hand: A♣ 7♠ (18)
Player Wins

There are 25 cards left in the deck
-----------------------

Less than 26 cards left. Game over!

</code></pre>

</div>

</div>

